package ru.sd.MyBookShop.data;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@Getter
@Setter
@NoArgsConstructor
@ApiModel(description = "data model of book entity")
@Entity
@Table(name = "books")
public class Book {

    @ApiModelProperty(value = "book's id generated by db", position = 1)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(nullable = false)
    @ApiModelProperty(value = "title of the book"
            , example = "Garry Potter"
            , position = 2)
    private String title;

    @Column(name = "pub_date", columnDefinition = "timestamp", nullable = false)
    @ApiModelProperty(value = "date of book publication"
            , example = "01/01/2020"
            , position = 3)
    private Date publicationDate;

    @Column(name = "is_bestseller"
            , columnDefinition = "smallint"
            , nullable = false)
    @ApiModelProperty(value = "bestseller or not status. if value = 1 then this book " +
            "is a bestseller, if value = 0 then not", position = 4)
    private int isBestseller;

    @ApiModelProperty("mnemonical identity character sequense")
    private String slug;
    @ApiModelProperty("image url")
    private String image;

    @Column(name = "price", nullable = false)
    @JsonProperty("price")
    @ApiModelProperty(value = "old price before discount", position = 5)
    private Integer priceOld;

    @Column(name = "discount", columnDefinition = "smallint default 0",
            nullable = false)
    @JsonProperty("discount")
    @ApiModelProperty(value = "size of discount at procents. if discount is abcent " +
            "then 0", position = 6)
    private Integer price;

    @Column(columnDefinition = "text")
    @ApiModelProperty("book's description")
    private String description;

    @ManyToOne
    @JoinColumn(name = "author_id", referencedColumnName = "id", foreignKey =
    @ForeignKey(name = "BA_FK"))
    @JsonIgnore
    @ApiModelProperty(value = "surname of book's author", position = 7)
    private Author author;

    @ManyToOne
    @JoinColumn(name = "genre_id", referencedColumnName = "id", foreignKey =
    @ForeignKey(name = "BG_FK"))
    @JsonIgnore
    private Genre genre;

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", author='" + author + '\'' +
                ", title='" + title + '\'' +
                ", priceOld='" + priceOld + '\'' +
                ", price='" + price + '\'' +
                '}';
    }
}
